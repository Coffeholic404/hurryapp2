import * as _nuxt_schema from '@nuxt/schema';

/**
 * Icon dimensions.
 *
 * Used in:
 *  icon (as is)
 *  alias (overwrite icon's properties)
 *  root of JSON file (default values)
 */
interface IconifyDimenisons {
    left?: number;
    top?: number;
    width?: number;
    height?: number;
}
/**
 * Icon transformations.
 *
 * Used in:
 *  icon (as is)
 *  alias (merged with icon's properties)
 */
interface IconifyTransformations {
    rotate?: number;
    hFlip?: boolean;
    vFlip?: boolean;
}
/**
 * Combination of dimensions and transformations.
 */
interface IconifyOptional extends IconifyDimenisons, IconifyTransformations {
}
/**
 * Alias.
 */
interface IconifyAlias extends IconifyOptional {
    parent: string;
}
/**
 * Icon.
 */
interface IconifyIcon extends IconifyOptional {
    body: string;
}
/**
 * Icon with optional parameters that are provided by API and affect only search
 */
interface APIIconAttributes {
    hidden?: boolean;
}
interface ExtendedIconifyIcon extends IconifyIcon, APIIconAttributes {
}
interface ExtendedIconifyAlias extends IconifyAlias, APIIconAttributes {
}
/**
 * "icons" field of JSON file.
 */
interface IconifyIcons {
    [index: string]: ExtendedIconifyIcon;
}
/**
 * "aliases" field of JSON file.
 */
interface IconifyAliases {
    [index: string]: ExtendedIconifyAlias;
}
/**
 * JSON structure, contains only icon data
 */
interface IconifyJSONIconsData extends IconifyDimenisons {
    prefix: string;
    provider?: string;
    icons: IconifyIcons;
    aliases?: IconifyAliases;
}

declare const availableCollectionNames: readonly ["material-symbols", "ic", "mdi", "ph", "solar", "tabler", "ri", "bi", "carbon", "iconamoon", "ion", "uil", "tdesign", "teenyicons", "mingcute", "clarity", "iconoir", "majesticons", "zondicons", "ant-design", "bx", "bxs", "gg", "octicon", "cil", "lucide", "basil", "pixelarticons", "system-uicons", "ci", "akar-icons", "memory", "typcn", "radix-icons", "ep", "circum", "mdi-light", "fe", "eos-icons", "charm", "prime", "humbleicons", "uiw", "uim", "uit", "uis", "maki", "gridicons", "mi", "quill", "gala", "fluent", "icon-park-outline", "icon-park-solid", "icon-park-twotone", "icon-park", "vscode-icons", "jam", "heroicons", "codicon", "pajamas", "pepicons-pop", "pepicons-print", "pepicons-pencil", "bytesize", "ei", "streamline", "guidance", "fa6-solid", "fa6-regular", "ooui", "nimbus", "formkit", "line-md", "meteocons", "svg-spinners", "openmoji", "twemoji", "noto", "fluent-emoji", "fluent-emoji-flat", "fluent-emoji-high-contrast", "noto-v1", "emojione", "emojione-monotone", "emojione-v1", "fxemoji", "streamline-emojis", "bxl", "logos", "simple-icons", "cib", "fa6-brands", "nonicons", "arcticons", "file-icons", "devicon", "devicon-plain", "skill-icons", "brandico", "entypo-social", "cryptocurrency", "cryptocurrency-color", "flag", "circle-flags", "flagpack", "cif", "gis", "map", "geo", "game-icons", "fad", "academicons", "wi", "healthicons", "medical-icon", "covid", "la", "eva", "dashicons", "flat-color-icons", "entypo", "foundation", "raphael", "icons8", "iwwa", "heroicons-outline", "heroicons-solid", "fa-solid", "fa-regular", "fa-brands", "fa", "fluent-mdl2", "fontisto", "icomoon-free", "subway", "oi", "wpf", "simple-line-icons", "et", "el", "vaadin", "grommet-icons", "whh", "si-glyph", "zmdi", "ls", "bpmn", "flat-ui", "vs", "topcoat", "il", "websymbol", "fontelico", "ps", "feather", "mono-icons", "pepicons"];
/** All the available icon collections when you have `@iconify/json` installed  */
type CollectionNames = typeof availableCollectionNames[number];

type GenerateOptions = {
    /**
     * Scale relative to the current font size (1em).
     *
     * @default 1
     */
    scale?: number;
    /**
     * Extra CSS properties applied to the generated CSS.
     *
     * @default `{}`
     */
    extraProperties?: Record<string, string>;
};
type IconsOptions = {
    /**
     * Class prefix for matching icon rules.
     *
     * @default `i`
     */
    prefix?: string;
} & GenerateOptions;

type Optional<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K>;

type IconCollection = Record<string, Optional<IconifyJSONIconsData, 'prefix'>>;
type IconsPluginOptions = {
    /**
     * Provide any icon files or collections you want to add to the automatically resolved Iconify sets
     * Can be either single or array of:
     *   string: resolved paths to icon files
     *   IconCollection: icon collection object
     */
    customCollections?: string | IconCollection | (IconCollection | string)[];
    /**
     * Specify the Iconify sets you wish to include
     * Can be:
     *   IconCollection: entirely override the automation
     *   CollectionNames[]: specify the sets to include (ie ['mdi', 'ph])
     *   []: turn off automated resolution altogether
     *   'all': specifically opt in to loading the full Iconify JSON; warning: can be slow
     */
    collections?: IconCollection | CollectionNames[] | 'all';
    /**
     * Used to return all the resolved Iconify and custom prefixes
     */
    resolvedPrefixes?: string[];
} & IconsOptions;

type TailwindIconsModuleOptions = {
    /**
     * Only allow tailwind generated icons; do not use icones API to retrieve them
     *
     * @default false
     */
    tailwindOnly?: boolean;
    resolvedPrefixes?: string[];
} & IconsPluginOptions;
interface ModuleOptions {
}
declare const _default: _nuxt_schema.NuxtModule<TailwindIconsModuleOptions>;

export { type ModuleOptions, type TailwindIconsModuleOptions, _default as default };
